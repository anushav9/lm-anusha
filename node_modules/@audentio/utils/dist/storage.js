'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _cookies = require('./cookies');

var _cookies2 = _interopRequireDefault(_cookies);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * A (very) simple localStorage wrapper
 * facilitates storing and retrieving objects/arrays
 */

var createStorage = function createStorage(storage) {
    return {
        set: function set(item, data) {
            switch (typeof data === 'undefined' ? 'undefined' : _typeof(data)) {
                case 'object':
                    // Stringify objects before storing them
                    storage.setItem(item, JSON.stringify(data));
                    break;
                default:
                    storage.setItem(item, data);
            }
        },
        get: function get(item) {
            var data = storage.getItem(item);
            try {
                return JSON.parse(data);
            } catch (err) {
                return data;
            }
        },
        remove: function remove(item) {
            return storage.removeItem(item);
        }
    };
};

var no_op = {
    set: function set() {},
    get: function get() {},
    remove: function remove() {}
};

var storage = Object.assign({}, no_op, {
    local: no_op,
    session: no_op,
    cookies: no_op
});

if (process.env.isBrowser) {
    storage.cookies = createStorage(_cookies2.default);

    try {
        // try catch for safari private mode
        storage.local = createStorage(localStorage);
        storage.session = createStorage(sessionStorage);

        // try saving to localstorage
        localStorage.setItem('localStorageTest', 1);
        localStorage.removeItem('localStorageTest');

        // set defaults to localstorage
        storage.set = storage.local.set;
        storage.get = storage.local.get;
        storage.remove = storage.local.remove;
    } catch (e) {
        // localStorage failed
        // set defaults to cookie
        storage.set = storage.cookies.set;
        storage.get = storage.cookies.get;
        storage.remove = storage.cookies.remove;
    }
}

exports.default = storage;